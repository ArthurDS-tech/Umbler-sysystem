#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Configura√ß√£o R√°pida - Sistema de Notifica√ß√µes Internas
Script interativo para configurar servidor e clientes facilmente.
"""

import os
import sys
import platform
import socket
import secrets
import string

def get_local_ip():
    """Obt√©m IP local da m√°quina"""
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except Exception:
        return "127.0.0.1"

def generate_secure_token():
    """Gera token seguro aleat√≥rio"""
    chars = string.ascii_letters + string.digits
    return ''.join(secrets.choice(chars) for _ in range(20))

def update_server_token(token):
    """Atualiza token no arquivo do servidor"""
    try:
        with open('notification_server.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Substituir token padr√£o
        old_line = 'self.auth_token = "empresa_token_2024"'
        new_line = f'self.auth_token = "{token}"'
        
        if old_line in content:
            content = content.replace(old_line, new_line)
            
            with open('notification_server.py', 'w', encoding='utf-8') as f:
                f.write(content)
            return True
        else:
            print("‚ö†Ô∏è Linha do token n√£o encontrada no servidor")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao atualizar servidor: {e}")
        return False

def create_client_config(server_ip, port, token):
    """Cria arquivo de configura√ß√£o do cliente"""
    config_content = f"""[DEFAULT]
# Configura√ß√£o do Cliente de Notifica√ß√µes
# Gerado automaticamente pelo quick_setup.py

# IP da m√°quina onde est√° rodando o servidor
server_host = {server_ip}

# Porta do servidor
server_port = {port}

# Token de autentica√ß√£o
auth_token = {token}

# Configura√ß√µes de notifica√ß√£o
notification_title = Notifica√ß√£o Interna
notification_timeout = 10
"""
    
    try:
        with open('client_config.ini', 'w', encoding='utf-8') as f:
            f.write(config_content)
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar configura√ß√£o do cliente: {e}")
        return False

def main():
    """Fun√ß√£o principal de configura√ß√£o"""
    print("=" * 60)
    print("‚öôÔ∏è CONFIGURA√á√ÉO R√ÅPIDA - SISTEMA DE NOTIFICA√á√ïES")
    print("=" * 60)
    print()
    
    # Verificar se arquivos necess√°rios existem
    required_files = ['notification_server.py', 'notification_client.py']
    missing_files = [f for f in required_files if not os.path.exists(f)]
    
    if missing_files:
        print("‚ùå Arquivos necess√°rios n√£o encontrados:")
        for file in missing_files:
            print(f"   - {file}")
        print()
        print("Execute este script no diret√≥rio do sistema de notifica√ß√µes.")
        return False
    
    print("‚úÖ Arquivos do sistema encontrados")
    print()
    
    # Detectar configura√ß√£o atual
    local_ip = get_local_ip()
    system_name = platform.system()
    
    print(f"Sistema detectado: {system_name}")
    print(f"IP local detectado: {local_ip}")
    print()
    
    # Perguntar tipo de configura√ß√£o
    print("Tipo de configura√ß√£o:")
    print("1. Servidor (m√°quina que enviar√° notifica√ß√µes)")
    print("2. Cliente (m√°quina que receber√° notifica√ß√µes)")
    print("3. Ambos (configurar servidor e cliente na mesma m√°quina)")
    print()
    
    while True:
        choice = input("Escolha uma op√ß√£o (1-3): ").strip()
        if choice in ['1', '2', '3']:
            break
        print("‚ö†Ô∏è Op√ß√£o inv√°lida. Digite 1, 2 ou 3.")
    
    print()
    
    # Configurar baseado na escolha
    if choice in ['1', '3']:  # Servidor
        print("üñ•Ô∏è CONFIGURA√á√ÉO DO SERVIDOR")
        print("-" * 30)
        
        # Token de seguran√ßa
        print("Configura√ß√£o de seguran√ßa:")
        print("1. Gerar token aleat√≥rio (recomendado)")
        print("2. Usar token personalizado")
        
        token_choice = input("Escolha (1-2): ").strip()
        
        if token_choice == '1':
            token = f"empresa_{generate_secure_token()}"
            print(f"‚úÖ Token gerado: {token}")
        else:
            while True:
                token = input("Digite o token personalizado (min. 10 caracteres): ").strip()
                if len(token) >= 10:
                    break
                print("‚ö†Ô∏è Token muito curto. Use pelo menos 10 caracteres.")
        
        # Atualizar servidor
        if update_server_token(token):
            print("‚úÖ Servidor configurado com novo token")
        else:
            print("‚ùå Erro ao configurar servidor")
            return False
    
    if choice in ['2', '3']:  # Cliente
        print()
        print("üíª CONFIGURA√á√ÉO DO CLIENTE")
        print("-" * 30)
        
        if choice == '3':  # Ambos - usar configura√ß√µes do servidor
            server_ip = local_ip
            server_port = 8765
            # Token j√° foi definido acima
        else:  # S√≥ cliente
            server_ip = input(f"IP do servidor (Enter para {local_ip}): ").strip()
            if not server_ip:
                server_ip = local_ip
            
            server_port = input("Porta do servidor (Enter para 8765): ").strip()
            if not server_port:
                server_port = 8765
            else:
                try:
                    server_port = int(server_port)
                except ValueError:
                    print("‚ö†Ô∏è Porta inv√°lida, usando 8765")
                    server_port = 8765
            
            token = input("Token de autentica√ß√£o: ").strip()
            if not token:
                print("‚ùå Token √© obrigat√≥rio para clientes")
                return False
        
        # Criar configura√ß√£o do cliente
        if create_client_config(server_ip, server_port, token):
            print("‚úÖ Cliente configurado")
        else:
            print("‚ùå Erro ao configurar cliente")
            return False
    
    print()
    print("=" * 60)
    print("üéâ CONFIGURA√á√ÉO CONCLU√çDA!")
    print("=" * 60)
    print()
    
    # Instru√ß√µes finais
    if choice in ['1', '3']:
        print("üìã PR√ìXIMOS PASSOS - SERVIDOR:")
        if system_name == "Windows":
            print("   Execute: start_server.bat")
        else:
            print("   Execute: ./start_server.sh")
        print(f"   O servidor estar√° dispon√≠vel em: {local_ip}:8765")
        print(f"   Token configurado: {token}")
        print()
    
    if choice in ['2', '3']:
        print("üìã PR√ìXIMOS PASSOS - CLIENTE:")
        if system_name == "Windows":
            print("   Execute: start_client_background.bat")
        else:
            print("   Execute: ./start_client_daemon.sh")
        print(f"   Conectar√° ao servidor: {server_ip}:{server_port}")
        print()
    
    print("üìû COMANDOS √öTEIS:")
    print("   Testar sistema: python test_system.py")
    if system_name == "Linux":
        print("   Deploy em massa: ./deploy_clients.sh")
    print("   Ver logs: tail -f *_notifications.log")
    print()
    
    print("üîí SEGURAN√áA:")
    print("   - Use este token em TODAS as m√°quinas da rede")
    print("   - Mantenha o token em segredo")
    print("   - Execute apenas na rede interna")
    print()
    
    print("‚úÖ Sistema pronto para uso!")
    
    return True

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Configura√ß√£o cancelada pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro na configura√ß√£o: {e}")
        sys.exit(1)