// Test script to verify site customer detection and tag processing
import { DatabaseService } from "../lib/database.js"

// Simulate the exact message you sent
const testMessage = "Ol√°, vim do site do Marcelino, voc√™ pode me ajudar?"

// Test the site detection function
function detectSiteCustomer(messageText, chatData = {}) {
  try {
    const lowerMessage = messageText.toLowerCase()
    console.log("üîç Testing message:", messageText)
    console.log("üîç Lowercase message:", lowerMessage)

    // Common patterns that indicate a customer came from the website
    const sitePatterns = [
      /ol[a√°],?\s*vim do site/i,
      /ol[a√°],?\s*encontrei voc[e√™]s no site/i,
      /vi no site/i,
      /encontrei no site/i,
      /pelo site/i,
      /atrav[e√©]s do site/i,
      /formul√°rio do site/i,
      /contato do site/i,
      /p[a√°]gina web/i,
      /website/i,
      /marcelino.*site/i,
      /site.*marcelino/i,
    ]

    // Check message content for site indicators
    for (const pattern of sitePatterns) {
      console.log(`üîç Testing pattern: ${pattern.source}`)
      if (pattern.test(lowerMessage)) {
        console.log(`‚úÖ MATCH! Cliente do site detectado por padr√£o: "${pattern.source}"`)
        return true
      } else {
        console.log(`‚ùå No match for pattern: ${pattern.source}`)
      }
    }

    return false
  } catch (error) {
    console.error("‚ùå Error detecting site customer:", error)
    return false
  }
}

// Test all the tags from the user's list
const ALL_TAGS = [
  "Troca",
  "Devolu√ß√£o",
  "Cancelamento",
  "Reembolso",
  "Produto com defeito",
  "Produto n√£o chegou",
  "Produto errado",
  "Atraso na entrega",
  "Entrega",
  "Pagamento",
  "Boleto",
  "Cart√£o",
  "Pix",
  "Parcelamento",
  "Desconto",
  "Cupom",
  "Promo√ß√£o",
  "Frete",
  "C√°lculo de frete",
  "Frete gr√°tis",
  "Disponibilidade",
  "Estoque",
  "Tamanho",
  "Cor",
  "Modelo",
  "Medidas",
  "Informa√ß√µes do produto",
  "Como usar",
  "Garantia",
  "Assist√™ncia t√©cnica",
  "Cadastro",
  "Login",
  "Senha",
  "Dados pessoais",
  "Endere√ßo",
  "Telefone",
  "Email",
  "CPF",
  "CNPJ",
  "Inscri√ß√£o estadual",
  "Nota fiscal",
  "Danfe",
  "Comprovante",
  "Recibo",
  "Certificado",
  "Or√ßamento",
  "Cota√ß√£o",
  "Proposta",
  "Contrato",
  "Pedido",
  "Venda",
  "Compra",
  "Negocia√ß√£o",
  "Condi√ß√µes",
  "Prazo",
  "Qualidade",
  "Satisfa√ß√£o",
  "Reclama√ß√£o",
  "Sugest√£o",
  "Elogio",
  "Cr√≠tica",
  "Feedback",
  "Avalia√ß√£o",
  "Pesquisa",
  "Opini√£o",
  "Suporte",
  "Ajuda",
  "D√∫vida",
  "Problema",
  "Solu√ß√£o",
  "Orienta√ß√£o",
  "Instru√ß√£o",
  "Manual",
  "Tutorial",
  "Passo a passo",
  "Site",
  "App",
  "Sistema",
  "Plataforma",
  "Tecnologia",
  "Bug",
  "Erro",
  "Falha",
  "Lentid√£o",
  "Indisponibilidade",
  "Manuten√ß√£o",
  "Atualiza√ß√£o",
  "Vers√£o",
  "Funcionalidade",
  "Recurso",
  "Configura√ß√£o",
  "Personaliza√ß√£o",
  "Customiza√ß√£o",
  "Integra√ß√£o",
  "API",
  "Relat√≥rio",
  "Dashboard",
  "Gr√°fico",
  "Estat√≠stica",
  "M√©trica",
  "An√°lise",
  "Dados",
  "Informa√ß√£o",
  "Consulta",
  "Pesquisa",
  "Filtro",
  "Busca",
  "Ordena√ß√£o",
  "Classifica√ß√£o",
  "Categoria",
  "Tag",
  "Etiqueta",
  "Marca√ß√£o",
  "Identifica√ß√£o",
  "Rotula√ß√£o",
  "Transferencia",
  "Encaminhamento",
  "Redirecionamento",
  "Passagem",
  "Mudan√ßa",
]

function testTagDetection(messageText) {
  console.log("\nüè∑Ô∏è === TESTING TAG DETECTION ===")

  const tagAddedPatterns = [
    /etiqueta adicionada na conversa[:\s]*([^.\n]+)/i,
    /tag adicionada[:\s]*([^.\n]+)/i,
    /adicionada a etiqueta[:\s]*([^.\n]+)/i,
    /nova etiqueta[:\s]*([^.\n]+)/i,
  ]

  // Test each tag with different message formats
  ALL_TAGS.forEach((tag) => {
    const testMessages = [
      `Etiqueta adicionada na conversa: ${tag}`,
      `Tag adicionada: ${tag}`,
      `Adicionada a etiqueta ${tag}`,
      `Nova etiqueta: ${tag}`,
    ]

    testMessages.forEach((testMsg) => {
      for (const pattern of tagAddedPatterns) {
        const match = testMsg.match(pattern)
        if (match) {
          const detectedTag = match[1].trim()
          if (detectedTag === tag) {
            console.log(`‚úÖ Tag "${tag}" detectada corretamente em: "${testMsg}"`)
          } else {
            console.log(`‚ùå Tag "${tag}" n√£o detectada corretamente. Detectou: "${detectedTag}"`)
          }
          break
        }
      }
    })
  })
}

// Simulate a complete webhook payload
const simulateWebhookPayload = {
  Type: "Message",
  EventDate: new Date().toISOString(),
  EventId: "TEST_EVENT_123",
  Payload: {
    Type: "Chat",
    Content: {
      Id: "TEST_CONVERSATION_123",
      Contact: {
        Name: "Cliente Teste",
        PhoneNumber: "+5511999999999",
        Email: "teste@email.com",
      },
      LastMessage: {
        Id: "TEST_MESSAGE_123",
        Content: testMessage,
        Source: "Contact",
        IsPrivate: false,
        Sender: {
          Id: "CUSTOMER_ID",
          Name: "Cliente Teste",
        },
      },
      LastOrganizationMember: {
        Id: "ZrzsX_BLm_zYqujY", // Adrielli Saturnino
      },
      OrganizationMembers: [
        {
          Id: "ZrzsX_BLm_zYqujY",
          Name: "Adrielli Saturnino",
          DisplayName: "Adrielli",
        },
      ],
      Tags: ["Site", "Novo Cliente"],
    },
  },
}

async function runTests() {
  console.log("üß™ === INICIANDO TESTES DE DETEC√á√ÉO ===\n")

  // Test 1: Site customer detection
  console.log("üåê === TESTE 1: DETEC√á√ÉO CLIENTE DO SITE ===")
  const isSiteCustomer = detectSiteCustomer(testMessage)
  console.log(`Resultado: ${isSiteCustomer ? "‚úÖ DETECTADO" : "‚ùå N√ÉO DETECTADO"}`)

  // Test 2: Tag detection
  testTagDetection()

  // Test 3: Simulate webhook call
  console.log("\nüì° === TESTE 3: SIMULA√á√ÉO WEBHOOK ===")
  console.log("Payload simulado:", JSON.stringify(simulateWebhookPayload, null, 2))

  // Test 4: Check database connection
  console.log("\nüíæ === TESTE 4: CONEX√ÉO BANCO DE DADOS ===")
  try {
    // Try to get conversations to test database connection
    const conversations = await DatabaseService.getConversationsWithMetrics()
    console.log(`‚úÖ Conex√£o com banco OK. ${conversations.length} conversas encontradas.`)
  } catch (error) {
    console.error("‚ùå Erro na conex√£o com banco:", error.message)
  }

  console.log("\nüèÅ === TESTES CONCLU√çDOS ===")
}

// Run the tests
runTests().catch(console.error)
