#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Teste - Sistema de Notifica√ß√µes Internas
Testa conectividade, autentica√ß√£o e funcionalidades b√°sicas.
"""

import asyncio
import websockets
import json
import sys
import platform
from datetime import datetime

async def test_server_connection(host, port, token):
    """Testa conex√£o e autentica√ß√£o com o servidor"""
    server_url = f"ws://{host}:{port}"
    
    print(f"üîó Testando conex√£o com {server_url}...")
    
    try:
        async with websockets.connect(server_url, ping_interval=30) as websocket:
            print("‚úÖ Conex√£o WebSocket estabelecida")
            
            # Testar autentica√ß√£o
            auth_message = {
                'type': 'auth',
                'token': token,
                'client_info': {
                    'platform': platform.system(),
                    'hostname': platform.node(),
                    'timestamp': datetime.now().isoformat()
                }
            }
            
            print("üîê Testando autentica√ß√£o...")
            await websocket.send(json.dumps(auth_message))
            
            # Aguardar resposta
            response = await asyncio.wait_for(websocket.recv(), timeout=10)
            data = json.loads(response)
            
            if data.get('type') == 'auth_response':
                if data.get('status') == 'success':
                    print("‚úÖ Autentica√ß√£o bem-sucedida")
                    
                    # Testar ping
                    print("üì° Testando ping...")
                    ping_message = {'type': 'ping'}
                    await websocket.send(json.dumps(ping_message))
                    
                    pong_response = await asyncio.wait_for(websocket.recv(), timeout=5)
                    pong_data = json.loads(pong_response)
                    
                    if pong_data.get('type') == 'pong':
                        print("‚úÖ Ping/Pong funcionando")
                        return True
                    else:
                        print("‚ùå Ping/Pong falhou")
                        return False
                else:
                    print(f"‚ùå Autentica√ß√£o falhou: {data.get('message')}")
                    return False
            else:
                print("‚ùå Resposta de autentica√ß√£o inv√°lida")
                return False
                
    except websockets.exceptions.ConnectionRefused:
        print("‚ùå Conex√£o recusada - Servidor pode estar offline")
        return False
    except asyncio.TimeoutError:
        print("‚ùå Timeout na comunica√ß√£o")
        return False
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def test_notification_system():
    """Testa sistema de notifica√ß√µes local"""
    print("üì± Testando sistema de notifica√ß√µes...")
    
    try:
        # Importar cliente para usar fun√ß√£o de notifica√ß√£o
        sys.path.append('.')
        from notification_client import NotificationClient
        
        client = NotificationClient()
        success = client.show_notification(
            "Teste do Sistema",
            "Esta √© uma notifica√ß√£o de teste do sistema interno. Se voc√™ est√° vendo isso, o sistema est√° funcionando corretamente!"
        )
        
        if success:
            print("‚úÖ Sistema de notifica√ß√£o funcionando")
            return True
        else:
            print("‚ùå Sistema de notifica√ß√£o n√£o funcionou")
            return False
            
    except ImportError as e:
        print(f"‚ùå Erro ao importar m√≥dulos: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro no teste de notifica√ß√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal de teste"""
    print("=" * 60)
    print("üß™ TESTE DO SISTEMA DE NOTIFICA√á√ïES INTERNAS")
    print("=" * 60)
    print()
    
    # Configura√ß√µes de teste (altere conforme necess√°rio)
    server_host = input("Digite o IP do servidor (Enter para localhost): ").strip()
    if not server_host:
        server_host = "127.0.0.1"
    
    server_port = 8765
    auth_token = input("Digite o token de autentica√ß√£o (Enter para padr√£o): ").strip()
    if not auth_token:
        auth_token = "empresa_token_2024"
    
    print()
    print(f"Configura√ß√µes de teste:")
    print(f"  Servidor: {server_host}:{server_port}")
    print(f"  Token: {auth_token[:4]}***")
    print(f"  Sistema: {platform.system()} {platform.release()}")
    print()
    
    # Teste 1: Sistema de notifica√ß√£o local
    print("üìã TESTE 1: Sistema de Notifica√ß√£o Local")
    print("-" * 40)
    notification_ok = test_notification_system()
    print()
    
    # Teste 2: Conex√£o com servidor
    print("üìã TESTE 2: Conex√£o com Servidor")
    print("-" * 40)
    server_ok = asyncio.run(test_server_connection(server_host, server_port, auth_token))
    print()
    
    # Resumo dos testes
    print("=" * 60)
    print("üìä RESUMO DOS TESTES")
    print("=" * 60)
    print(f"Notifica√ß√£o Local: {'‚úÖ OK' if notification_ok else '‚ùå FALHA'}")
    print(f"Conex√£o Servidor:  {'‚úÖ OK' if server_ok else '‚ùå FALHA'}")
    print()
    
    if notification_ok and server_ok:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("Sistema est√° funcionando corretamente.")
    elif notification_ok:
        print("‚ö†Ô∏è Notifica√ß√µes OK, mas servidor n√£o conectou")
        print("Verifique se o servidor est√° rodando e configura√ß√µes de rede.")
    elif server_ok:
        print("‚ö†Ô∏è Servidor OK, mas notifica√ß√µes falharam")
        print("Verifique instala√ß√£o de depend√™ncias de notifica√ß√£o.")
    else:
        print("‚ùå M√öLTIPLAS FALHAS DETECTADAS")
        print("Verifique instala√ß√£o e configura√ß√µes.")
    
    print()
    print("Para mais informa√ß√µes, consulte os logs:")
    print("  - server_notifications.log")
    print("  - client_notifications.log")

if __name__ == "__main__":
    main()